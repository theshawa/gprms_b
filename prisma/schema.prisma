// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum StaffRole {
    Admin
    Cashier
    Waiter
    KitchenManager
}

model StaffMember {
    id Int @id @default(autoincrement())

    username     String @unique
    passwordHash String

    name String

    role                StaffRole
    activities          StaffActivityLog[]
    assignedDiningAreas WaiterAssignment[]
}

model StaffActivityLog {
    id Int @id @default(autoincrement())

    staffMemberId Int
    staffMember   StaffMember @relation(fields: [staffMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    activity String

    createdAt DateTime @default(now())
}

model Customer {
    id Int @id @default(autoincrement())

    name        String
    phoneNumber String @unique

    loyaltyPoints Int @default(0)

    createdAt DateTime @default(now())
}

enum OrderStatusType {
    New
    InProgress
    Completed
    Rejected
}

model Order {
    id Int @id @default(autoincrement())

    orderCode String

    status OrderStatusType @default(New)

    createdAt DateTime @default(now())
}

model DiningArea {
    id Int @id @default(autoincrement())

    name        String @unique
    description String

    diningTables    DiningTable[]
    assignedWaiters WaiterAssignment[]

    image String
}

model DiningTable {
    id Int @id @default(autoincrement())

    name         String
    diningAreaId Int
    isReservable Boolean @default(true)
    maxSeats     Int

    diningArea DiningArea @relation(fields: [diningAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([name, diningAreaId])
}

model WaiterAssignment {
    id Int @id @default(autoincrement())

    diningAreaId Int
    diningArea   DiningArea @relation(fields: [diningAreaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    waiterId Int
    waiter   StaffMember @relation(fields: [waiterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    assignedAt DateTime @default(now())

    @@unique([diningAreaId, waiterId])
}

model Ingredient {
    id Int @id @default(autoincrement())

    name        String @unique
    description String

    costPerUnit Float @default(0.0)

    unit String @default("kg")

    stockQuantity     Float @default(0.0)
    lowStockThreshold Float @default(0.0)

    createdAt DateTime @default(now())

    stockMovements  IngredientStockMovement[]
    dishIngredients DishIngredient[]
}

model IngredientStockMovement {
    id Int @id @default(autoincrement())

    ingredientId Int
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    quantity Float
    reason   String

    createdAt DateTime @default(now())
}

model Dish {
    id Int @id @default(autoincrement())

    name        String @unique
    description String

    price Float @default(0.0)

    image String

    ingredients       DishIngredient[]
    menuItems         MenuItem[]
    TakeAwayOrderItem TakeAwayOrderItem[]
}

model DishIngredient {
    id Int @id @default(autoincrement())

    dishId Int
    dish   Dish @relation(fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    ingredientId Int
    ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    quantity Float

    @@unique([dishId, ingredientId])
}

enum Meal {
    Brunch
    Lunch
    HighTea
    Dinner
}

model Menu {
    id Int @id @default(autoincrement())

    name        String @unique
    meal        Meal
    description String

    isActive Boolean @default(false)

    menuSections MenuSection[]
}

model MenuSection {
    id Int @id @default(autoincrement())

    menuId Int
    menu   Menu @relation(fields: [menuId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    name        String
    description String

    position Int

    menuItems MenuItem[]
}

model MenuItem {
    id Int @id @default(autoincrement())

    menuSectionId Int
    menuSection   MenuSection @relation(fields: [menuSectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    dishId Int
    dish   Dish @relation(fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    position Int

    @@unique([menuSectionId, dishId])
}

model TakeAwayOrderItem {
    id Int @id @default(autoincrement())

    takeAwayOrderId Int
    takeAwayOrder   TakeAwayOrder @relation(fields: [takeAwayOrderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    dishId Int
    dish   Dish @relation(fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    quantity Int @default(1)

    priceAtOrder Float

    @@unique([takeAwayOrderId, dishId])
}

enum TakeAwayOrderStatusType {
    New
    Preparing
    Prepared
    Completed
    Cancelled
}

model TakeAwayOrder {
    id Int @id @default(autoincrement())

    customerName  String
    customerPhone String

    notes String

    totalAmount Float @default(0.0)

    status TakeAwayOrderStatusType @default(New)

    items TakeAwayOrderItem[]

    createdAt DateTime @default(now())
}
